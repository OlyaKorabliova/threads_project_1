!!!! ВАЖЛИВО !!!
Read.txt — файл конфігурації (зразу в проекті) --
до нього потрібно вказувати шлях вже в самому файлі example.cpp
 44.   myfile.open("/home/natasha/CLionProjects/threads_project/Read.txt");    //файл який має три шляхи для файлів і кількість потоків
можу і з консолі зробити, як ось у e.py при зчитуванні файлів для конфігураціїї
!!!


1. Файл e.py
-комілює
-запитує про тип запуску конфігурації - або з консолі зчитувати, або з файлу (READ.TXT, який знаходиться в проекті)
якщо з консолі, то дані записує в цей ж файл READ.TXT
-Одразу запитує про кількість запуску програми
-запускає
-після всіх запусків виводить мінімальний час за всі дії (читання, обрахунок і т.д.)

2. Файл example.cpp (головний файл )
-крім мейну, тут ще є дві функції reading()
    -(відкриває файл конфігурації Read.txt,
    -виділяє з нього файл для відкривання, запису, кількість потоків.
    -У моєму випадку — data.txt, res_a.txt, res_n.txt)
-open_data_file(string path)
    -path передається як змінна fileO або файл для відкривання
    -всі слова з цього файлу пушаться в сектор стрінгів words (в мейні - all_words)
-main
    -окрім виклику функцій вище є ще:
    -розбивання вектору all_words на плюс-мінус рівні частини, щоб кожен з потоків працював з рівною частиною даних
    - запуск потоків
    - прінт всіх цих порахованих слів (114 рядок, можна забрати)
    - перетворення map в vector, для сортування за кількістю повторювань
    -запис в файли
    -вивід часу
    !!!
    запис часу в файл result.txt створюється вже під час виконання в проекті (в папці cmake-build-debug)
    log.open("result.txt", fstream::app)
    !!!
3. Файл writing.cpp - два методи для записування за алфавітом і за кількістю повторів.
4. Файл timing.cpp - час рахується за Вашим методом з використанням chrono.
5. Файл counting - сам обрахунок слів

